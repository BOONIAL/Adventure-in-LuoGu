//https://www.luogu.com.cn/problem/P3373
//https://www.luogu.com.cn/problemnew/solution/P3373
//双lazytag，不过在处理乘标记下传时，子加标记也要乘于乘标记（“升值了”）
//不能孤立两个标记

#include<bits/stdc++.h>
using namespace std;
#define ll long long

ll n,m,p,a[400000];
ll sum[400000],tag1[400000],tag2[400000];

void build(int l,int r,int rt){
    tag1[rt]=1;//初始化tag1
    if(l==r){
        sum[rt]=a[l];
        return;
    }
    int mid=(l+r)>>1;
    build(l,mid,rt<<1);
    build(mid+1,r,rt<<1|1);
    sum[rt]=(sum[rt<<1]+sum[rt<<1|1])%p;
}

void pushdown(int rt,int l,int r){
    int mid=(l+r)>>1;
    sum[rt<<1]=(sum[rt<<1]*tag1[rt]+tag2[rt]*(mid-l+1))%p;
    sum[rt<<1|1]=(sum[rt<<1|1]*tag1[rt]+tag2[rt]*(r-mid))%p;
    
    tag1[rt<<1]=(tag1[rt<<1]*tag1[rt])%p;
    tag1[rt<<1|1]=(tag1[rt<<1|1]*tag1[rt])%p;
    
    tag2[rt<<1]=(tag2[rt<<1]*tag1[rt]+tag2[rt])%p;
    tag2[rt<<1|1]=(tag2[rt<<1|1]*tag1[rt]+tag2[rt])%p;
    tag1[rt]=1,tag2[rt]=0;
    return;
}


ll query(int L,int R,int l,int r,int rt){
    if(L<=l&&R>=r){
        return sum[rt];
    }
    pushdown(rt,l,r);
    int mid=(l+r)>>1;
    ll tot=0;
    if(L<=mid) tot+=query(L,R,l,mid,rt<<1);
    if(R>=mid+1) tot+=query(L,R,mid+1,r,rt<<1|1);
    return tot;
}

void update(int L,int R,int l,int r,int rt,int type,int k){
    if(L<=l&&R>=r){
        if(type==1){//乘法还要处理加tag
            sum[rt]=(sum[rt]*k)%p;
            tag1[rt]=(tag1[rt]*k)%p;
            tag2[rt]=(tag2[rt]*k)%p;
            return;
        }
        if(type==2){//加法就只处理加tag
            sum[rt]=(sum[rt]+k*(r-l+1))%p;
            tag2[rt]=(tag2[rt]+k)%p;
            return;
        }
    }
    pushdown(rt,l,r);
    int mid=(l+r)>>1;
    if(L<=mid) update(L,R,l,mid,rt<<1,type,k);
    if(R>=mid+1) update(L,R,mid+1,r,rt<<1|1,type,k);
    sum[rt]=(sum[rt<<1]+sum[rt<<1|1])%p;
}

int main(){
    cin>>n>>m>>p;
    for(int i=1;i<=n;i++) cin>>a[i];
    build(1,n,1);
    int type,x,y,k;
    for(int i=1;i<=m;i++){
        cin>>type;
        if(type!=3){
            cin>>x>>y>>k;
            update(x,y,1,n,1,type,k);
        }
        else{
            cin>>x>>y;
            cout<<query(x,y,1,n,1)%p<<endl;
        }
    }
}
