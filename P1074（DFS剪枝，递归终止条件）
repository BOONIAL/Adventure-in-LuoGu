//DFS剪枝：让含0少的行上的格子先填，减少尝试
//https://www.luogu.com.cn/problem/P1074
#include<bits/stdc++.h>

using namespace std;
struct ROW{
    int h,zero_cnt=0;//h：行
}row[10];//将行排序
int cmp(ROW a,ROW b){
    return a.zero_cnt<b.zero_cnt;
}
int v[3][10][10]={0};//记录行、列、3x3小格数的使用记录。[处于的位置][数字的使用情况]
int ans=0,maze[10][10],preans[10][10]={0},gr[83]={0};//gr:按权重排序的格子，值压缩了行列信息。preans：储存待定组
int fid(int x,int y){//找到对应的小格子
    int id;
    if(x<=3){
        if(y<=3)
            id=1;
        else if(y<=6)
            id=2;
        else
            id=3;
    }
    else if(x<=6){
        if(y<=3)
            id=4;
        else if(y<=6)
            id=5;
        else
            id=6;
    }
    else{
        if(y<=3)
            id=7;
        else if(y<=6)
            id=8;
        else
            id=9;
    }
    return id;
}

int grade(int r,int c){//得到格子的权重
    int coe;
    if(r==1||r==9||c==1||c==9)
        coe=6;
    else if(r==2||r==8||c==2||c==8)
        coe=7;
    else if(r==3||r==7||c==3||c==7)
        coe=8;
    else if(r==4||r==6||c==4||c==6)
        coe=9;
    else
        coe=10;
    return coe;
}
void dfs(int n){//n为排序之后的格子序
    if(n==82){
        int temp=0;
        for(int i=1;i<=9;i++){
            for(int j=1;j<=9;j++){
                //cout<<preans[i][j]<<" ";
                temp+=grade(i,j)*preans[i][j];
            }
        }
        ans=max(temp,ans);
        return;//不加会出错，用于递归终止
    }
    int x=gr[n]/9+1;//现在这个序号对应的是第x行，第y列
    int y=gr[n]%9;
    if(y==0)
        x=gr[n]/9,y=9;
    if(!maze[x][y]){//如果当前这个格子是0，才需要填
        for(int j=1;j<=9;j++){//判断1-9能不能用
            int g=fid(x,y);
            if(!v[0][x][j]&&!v[1][y][j]&&!v[2][g][j]){
                preans[x][y]=j;
                v[0][x][j]=1,v[1][y][j]=1,v[2][g][j]=1;
                dfs(n+1);
                v[0][x][j]=0,v[1][y][j]=0,v[2][g][j]=0;
            }
        }
    }
    else
        dfs(n+1);
}

int main(){
    for(int i=1;i<=9;i++){
        int cnt=0;
        for(int j=1;j<=9;j++){
            cin>>maze[i][j];
            if(maze[i][j]){
                int val=maze[i][j];
                int g=fid(i,j);
                //标记
                preans[i][j]=val;
                v[0][i][val]=v[1][j][val]=v[2][g][val]=1;
            }
            else{
                cnt++;
            }     
        }
        row[i].zero_cnt=cnt,row[i].h=i;
    }
    sort(row+1,row+1+9,cmp);//排序
    int num=1;
    for(int i=1;i<=9;i++){
        for(int j=1;j<=9;j++){
            gr[num++]=(row[i].h-1)*9+j;//将行和列信息压缩在值中，将格子按权排序
        }
    }
    dfs(1);    
    if(ans)
        cout<<ans;
    else
        cout<<-1;
}
