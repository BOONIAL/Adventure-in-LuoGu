//线段树模板
//https://www.luogu.com.cn/problem/P3372
//https://oi-wiki.org/ds/seg/
#include<bits/stdc++.h>
using namespace std;
typedef long long LL;

LL n,m,temp,a[100005],d[270000],b[270000];
void build(LL s,LL t,LL p){
    //对[s,t]区间建立线段树，根的编号为p
    if(s==t){
        d[p]=a[s];
        return;
    }
    LL m=(s+t)/2;
    build(s,m,p*2),build(m+1,t,p*2+1);
    d[p]=d[p*2]+d[(p*2)+1];
}
void update(LL l,LL r,LL c,LL s,LL t,LL p){
    // [l,r] 为修改区间,c 为被修改的元素的变化量,[s,t] 为当前节点包含的区间,p为当前节点的编号
    if(l<=s&&t<=r){
        d[p]+=(t-s+1)*c,b[p]+=c;
        return;
    }// 当前区间为修改区间的子集时直接修改当前节点的值,然后打标记,结束修改
    LL m=(s+t)/2;
    if(b[p]&&s!=t){
        // 如果当前节点的懒标记非空,则更新当前节点两个子节点的值和懒标记值
        d[p * 2] += b[p] * (m - s + 1), d[p * 2 + 1] += b[p] * (t - m);
        b[p * 2] += b[p], b[p * 2 + 1] += b[p];// 将标记下传给子节点
        b[p] = 0;// 清空当前节点的标记
    }
    if (l <= m) update(l, r, c, s, m, p * 2);
    if (r > m) update(l, r, c, m + 1, t, p * 2 + 1);
    d[p] = d[p * 2] + d[p * 2 + 1];
}
LL getsum(LL l, LL r, LL s, LL t, LL p) {
  // [l,r] 为修改区间,c 为被修改的元素的变化量,[s,t] 为当前节点包含的区间,p
  // 为当前节点的编号
  if (l <= s && t <= r) return d[p];
  // 当前区间为询问区间的子集时直接返回当前区间的和
  LL m = (s + t) / 2;
  if (b[p]) {
    // 如果当前节点的懒标记非空,则更新当前节点两个子节点的值和懒标记值
    d[p * 2] += b[p] * (m - s + 1), d[p * 2 + 1] += b[p] * (t - m),
        b[p * 2] += b[p], b[p * 2 + 1] += b[p];  // 将标记下传给子节点
    b[p] = 0;                                    // 清空当前节点的标记
  }
  LL sum = 0;
  if (l <= m) sum = getsum(l, r, s, m, p * 2);
  if (r > m) sum += getsum(l, r, m + 1, t, p * 2 + 1);
  return sum;
}
int main(){
    cin>>n>>m;  
    for(int i=1;i<=n;i++)
        cin>>a[i];
    build(1,n,1);
    for(int i=1;i<=m;i++){
        cin>>temp;
        if(temp==1){
            LL x,y,k;
            cin>>x>>y>>k;
            update(x,y,k,1,n,1);
        }
        if(temp==2){
            LL x,y;
            cin>>x>>y;
            cout<<getsum(x,y,1,n,1)<<endl;
        }
    }
}
